**********LONG FORM PATTERN**********

-- Tidal was mostly made for live improvisation,
-- where you make live edits to keep things interesting.
-- You can also use it to make longer form patterns though,
-- including for making 'tracks'

-- CAT
-- You give cat a list of patterns, and it plays one cycle from each one in turn
d1 $ cat [n "0 3 ~ 4 3 5 2 3" # sound "cpu2",
          ply "2 3" $ n "0 3 2 4" # sound "cpu2",
          off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2"
         ]


-- SEQPLOOP
-- This is similar to cat, but you give a start and stop time for each one.
-- For example to play each one twice:

d1 $ seqPLoop $ [(0,2, n "0 3 ~ 4 3 5 2 3" # sound "cpu2"),
                  (2,4, ply "2 3" $ n "0 3 2 4" # sound "cpu2"),
                  (4,6, off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2")
                ]

-- You can also have the different parts overlap,
-- lets add a high hat pattern that plays throughout:
d1 $ seqPLoop $ [(0,2, n "0 3 ~ 4 3 5 2 3" # sound "cpu2"),
                  (2,4, ply "2 3" $ n "0 3 2 4" # sound "cpu2"),
                  (4,6, off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2"),
                  (0,6, every 2 (fast 2) $ sound "hh*8")
                ]

-- UR
-- The ur function is more involved - you give names to different
-- parts, and then make a pattern of them. A pattern of patterns!

-- Lets first redo the above seqPLoop example using ur:

let pats = [("a", n "0 3 ~ 4 3 5 2 3" # sound "cpu2"),
            ("b", ply "2 3" $ n "0 3 2 4" # sound "cpu2"),
            ("c", off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2"),
            ("highhat", every 2 (fast 2) $ sound "hh*8")
           ]
in
d1 $ ur 6 "[a b c, highhat]" pats []

-- That first number, in this case 16, specifies the number of cycles
-- to stretch the pattern-of-patterns over.

-- Here's an example mixing up the pattern-of-patterns to bring things
-- in and out in different ways. I replaced the 'b' pattern with a
-- simple tune so you can hear it more clearly.

let pats = [("a", n "0 3 ~ 4 3 5 2 3" # sound "cpu2"),
            ("b", ply "2 3" $ n "0 5 [7 ~] 2" #
                  sound "arpy" # lpf (range 1000 2000 sine) # lpq 0.2 # speed 0.5),
            ("c", off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2"),
            ("highhat", every 2 (fast 2) $ sound "hh*8")
           ]
in
d1 $ ur 6 "[b ~ b ~, c a, ~ highhat ~]" pats []

-- You can also pass `ur` a list of functions, and use those to add variations to the different parts:
let pats = [("a", n "0 3 ~ 4 3 5 2 3" # sound "cpu2"),
            ("b", ply "2 3" $ n "0 5 [7 ~] 2" #
                  sound "arpy" # lpf (range 1000 2000 sine) # lpq 0.2 # speed 0.5),
            ("c", off 0.125 (# crush 3) $ n "0 3 2 4" # sound "cpu2"),
            ("highhat", every 2 (fast 2) $ sound "hh*8")
           ]
    functions = [("faster",hurry 2),
                 ("crush", (# crush 2))
                ]
in
d1 $ ur 6 "[b ~ b:crush ~, c [a a:faster], ~ highhat ~]" pats functions
